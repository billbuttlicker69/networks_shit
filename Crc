Hamming code

import java.util.*;

class Hamming {
public static void main(String args[]) {
Scanner scan = new Scanner(System.in);
System.out.println("Enter the number of bits for the Hamming data:");
int n = scan.nextInt();
int a[] = new int[n];

for(int i=0 ; i < n ; i++) {
System.out.println("Enter bit no. " + (n-i) + ":");
a[n-i-1] = scan.nextInt();
}

System.out.println("You entered:");
for(int i=0 ; i < n ; i++) {
System.out.print(a[n-i-1]);
}
System.out.println();

int b[] = generateCode(a);

System.out.println("Generated code is:");
for(int i=0 ; i < b.length ; i++) {
System.out.print(b[b.length-i-1]);
}
System.out.println();

receive(b, b.length - a.length);
}

static int[] generateCode(int a[]) {
int b[];

int i=0, parity_count=0 ,j=0, k=0;
while(i < a.length) {
if(Math.pow(2,parity_count) == i+parity_count + 1) {
parity_count++;
}
else {
i++;
}
}

b = new int[a.length + parity_count];

for(i=1 ; i <= b.length ; i++) {
if(Math.pow(2, j) == i) {
b[i-1] = 2;
j++;
}
else {
b[k+j] = a[k++];
}
}
for(i=0 ; i < parity_count ; i++) {
b[((int) Math.pow(2, i))-1] = getParity(b, i);
}
return b;
}

static int getParity(int b[], int power) {
int parity = 0;
for(int i=0 ; i < b.length ; i++) {
if(b[i] != 2) {
int k = i+1;
String s = Integer.toBinaryString(k);

int x = ((Integer.parseInt(s))/((int) Math.pow(10, power)))%10;
if(x == 1) {
if(b[i] == 1) {
parity = (parity+1)%2;
}
}
}
}
return parity;
}

static void receive(int a[], int parity_count) {
int power;
int parity[] = new int[parity_count];
String syndrome = new String();

for(power=0 ; power < parity_count ; power++) {
for(int i=0 ; i < a.length ; i++) {
int k = i+1;
String s = Integer.toBinaryString(k);
int bit = ((Integer.parseInt(s))/((int) Math.pow(10, power)))%10;
if(bit == 1) {
if(a[i] == 1) {
parity[power] = (parity[power]+1)%2;
}
}
}
syndrome = parity[power] + syndrome;
}

int error_location = Integer.parseInt(syndrome, 2);
if(error_location != 0) {
System.out.println("Error is at location " + error_location + ".");
a[error_location-1] = (a[error_location-1]+1)%2;
System.out.println("Corrected code is:");
for(int i=0 ; i < a.length ; i++) {
System.out.print(a[a.length-i-1]);
}
System.out.println();
}
else {
System.out.println("There is no error in the received data.");
}
System.out.println("Original data sent was:");
power = parity_count-1;
for(int i=a.length ; i > 0 ; i--) {
if(Math.pow(2, power) != i) {
System.out.print(a[i-1]);
}
else {
power--;
}
}
System.out.println();
}
}
Enter the number of bits for the Hamming data:
7
Enter bit no. 7:
1
Enter bit no. 6:
0
Enter bit no. 5:
1
Enter bit no. 4:
0
Enter bit no. 3:
1
Enter bit no. 2:
0
Enter bit no. 1:
1
You entered:
1010101
Generated code is:
10100101111
There is no error in the received data.
Original data sent was:
1010101


CRC
import java.util.*;

class CRC {
    public static void main(String args[]) {
        Scanner scan = new Scanner(System.in);

        int size;
        System.out.println("Enter the size of the data array: ");
        size = scan.nextInt();

        int data[] = new int[size];
        System.out.println("Enter data bits in the array one by one: ");
        for (int i = 0; i < size; i++) {
            System.out.println("Enter bit " + (size - i) + ":");
            data[i] = scan.nextInt();
        }

        System.out.println("Enter the size of the divisor array:");
        size = scan.nextInt();

        int divisor[] = new int[size];
        System.out.println("Enter divisor bits in the array one by one: ");
        for (int i = 0; i < size; i++) {
            System.out.println("Enter bit " + (size - i) + ":");
            divisor[i] = scan.nextInt();
        }

        int rem[] = divideDataWithDivisor(data, divisor);
        for (int i = 0; i < rem.length - 1; i++) {
            System.out.print(rem[i]);
        }
        System.out.println("\nGenerated CRC code is: ");

        for (int i = 0; i < data.length; i++) {
            System.out.print(data[i]);
        }
        for (int i = 0; i < rem.length - 1; i++) {
            System.out.print(rem[i]);
        }
        System.out.println();

        int sentData[] = new int[data.length + rem.length - 1];
        System.out.println("Enter bits in the array which you want to send: ");
        for (int i = 0; i < sentData.length; i++) {
            System.out.println("Enter bit " + (sentData.length - 1) + ":");
            sentData[i] = scan.nextInt();
        }

        receiveData(sentData, divisor);
    }

    static int[] divideDataWithDivisor(int oldData[], int divisor[]) {
        int rem[] = new int[divisor.length];
        int i;
        int data[] = new int[oldData.length + divisor.length];
        System.arraycopy(oldData, 0, data, 0, oldData.length);
        System.arraycopy(data, 0, rem, 0, divisor.length);

        for (i = 0; i < oldData.length; i++) {
            if (rem[0] == 1) {
                for (int j = 1; j < divisor.length; j++) {
                    rem[j - 1] = exorOperation(rem[j], divisor[j]);
                    System.out.print(rem[j - 1]);
                }
            } else {
                for (int j = 1; j < divisor.length; j++) {
                    rem[j - 1] = exorOperation(rem[j], 0);
                    System.out.print(rem[j - 1]);
                }
            }
            rem[divisor.length - 1] = data[i + divisor.length];
            System.out.println(rem[divisor.length - 1]);
        }
        return rem;
    }

    static int exorOperation(int x, int y) {
        if (x == y) {
            return 0;
        }
        return 1;
    }

    static void receiveData(int data[], int divisor[]) {
        int rem[] = divideDataWithDivisor(data, divisor);
        for (int i = 0; i < rem.length; i++) {
            if (rem[i] != 0) {
                System.out.println("Currupted data received...");
                return;
            }
        }
        System.out.println("Data received without any error.");
    }
}
OUTPUT:
D:\Java\network\ex7>java CRC
Enter the size of the data array:
7
Enter data bits in the array one by one:
Enter bit 7:
1
Enter bit 6:
0
Enter bit 5:
0
Enter bit 4:
1
Enter bit 3:
1
Enter bit 2:
0
Enter bit 1:
1
Enter the size of the divisor array:
4
Enter divisor bits in the array one by one:
Enter bit 4:
1
Enter bit 3:
0
Enter bit 2:
1
Enter bit 1:
1
0101
1010
0011
0110
1100
1110
1010
101
Generated CRC code is:
1001101101
Enter bits in the array which you want to send:
Enter bit 9:
1
Enter bit 9:
0
Enter bit 9:
0
Enter bit 9:
1
Enter bit 9:
1
Enter bit 9:
0
Enter bit 9:
1
Enter bit 9:
1
Enter bit 9:
0
Enter bit 9:
1
0101
1010
0011
0111
1110
1011
0000
0000
0000
0000
Data received without any error.

